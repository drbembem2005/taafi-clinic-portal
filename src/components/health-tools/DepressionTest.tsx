
import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Label } from '@/components/ui/label';
import { assessDepression } from '@/utils/healthCalculations';
import { HealthToolResult } from '@/types/healthTools';

const DepressionTest = () => {
  const [currentStep, setCurrentStep] = useState(0);
  const [answers, setAnswers] = useState<number[]>(new Array(9).fill(0));
  const [result, setResult] = useState<HealthToolResult | null>(null);

  const questions = [
    'ููุฉ ุงูุงูุชูุงู ุฃู ุงููุชุนุฉ ูู ุฃุฏุงุก ุงูุฃุดูุงุก',
    'ุงูุดุนูุฑ ุจุงูุฅุญุจุงุท ุฃู ุงูุงูุชุฆุงุจ ุฃู ุงููุฃุณ',
    'ุตุนูุจุฉ ูู ุงูููู ุฃู ุงูุจูุงุก ูุงุฆูุงูุ ุฃู ุงูููู ุฃูุซุฑ ูู ุงููุงุฒู',
    'ุงูุดุนูุฑ ุจุงูุชุนุจ ุฃู ููุฉ ุงูุทุงูุฉ',
    'ุถุนู ุงูุดููุฉ ุฃู ุงูุฅูุฑุงุท ูู ุงูุฃูู',
    'ุงูุดุนูุฑ ุจุงูุณูุก ุชุฌุงู ููุณู - ุฃู ุฃูู ูุงุดู ุฃู ุฎุฐูุช ููุณู ุฃู ุนุงุฆูุชู',
    'ุตุนูุจุฉ ูู ุงูุชุฑููุฒ ุนูู ุงูุฃุดูุงุกุ ูุซู ูุฑุงุกุฉ ุงูุตุญููุฉ ุฃู ูุดุงูุฏุฉ ุงูุชููุฒููู',
    'ุงูุชุญุฑู ุฃู ุงูุชุญุฏุซ ุจุจุทุก ูุฏุฑุฌุฉ ุฃู ุงูุขุฎุฑูู ูุงุญุธูุงุ ุฃู ุงูุนูุณ - ูููู ูุถุทุฑุจุงู ุฃู ูุง ุชูุฏุฃ',
    'ุฃููุงุฑ ุฃูู ูู ุงูุฃูุถู ุฃู ุชููุชุ ุฃู ุฅูุฐุงุก ููุณู ุจุทุฑููุฉ ูุง'
  ];

  const options = [
    { value: 0, label: 'ูุง ุนูู ุงูุฅุทูุงู' },
    { value: 1, label: 'ุนุฏุฉ ุฃูุงู' },
    { value: 2, label: 'ุฃูุซุฑ ูู ูุตู ุงูุฃูุงู' },
    { value: 3, label: 'ุชูุฑูุจุงู ูู ููู' }
  ];

  const handleAnswerChange = (value: number) => {
    const newAnswers = [...answers];
    newAnswers[currentStep] = value;
    setAnswers(newAnswers);
  };

  const handleNext = () => {
    if (currentStep < questions.length - 1) {
      setCurrentStep(currentStep + 1);
    } else {
      calculateResult();
    }
  };

  const handlePrevious = () => {
    if (currentStep > 0) {
      setCurrentStep(currentStep - 1);
    }
  };

  const calculateResult = () => {
    const assessment = assessDepression(answers);
    setResult(assessment);
  };

  const getRiskColor = (level: string) => {
    switch (level) {
      case 'low': return 'text-green-600';
      case 'moderate': return 'text-yellow-600';
      case 'high': return 'text-orange-600';
      case 'very-high': return 'text-red-600';
      default: return 'text-gray-600';
    }
  };

  const getRiskBgColor = (level: string) => {
    switch (level) {
      case 'low': return 'bg-green-50 border-green-200';
      case 'moderate': return 'bg-yellow-50 border-yellow-200';
      case 'high': return 'bg-orange-50 border-orange-200';
      case 'very-high': return 'bg-red-50 border-red-200';
      default: return 'bg-gray-50 border-gray-200';
    }
  };

  if (result) {
    return (
      <Card className="border-2 border-brand/20">
        <CardHeader>
          <CardTitle className="text-xl text-center text-brand">ูุชุงุฆุฌ ุชูููู ุฃุนุฑุงุถ ุงูุงูุชุฆุงุจ</CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          <div className={`p-6 rounded-lg border-2 ${getRiskBgColor(result.level)}`}>
            <div className="text-center">
              <div className={`text-3xl font-bold ${getRiskColor(result.level)} mb-2`}>
                {result.category}
              </div>
              <div className="text-lg text-gray-700">{result.details}</div>
            </div>
          </div>

          <div className="space-y-3">
            <h4 className="font-bold text-gray-900">ุงูุชูุตูุงุช ููุชุนุงูู ูุน ุงูุงูุชุฆุงุจ:</h4>
            <ul className="space-y-2">
              {result.recommendations.map((rec, index) => (
                <li key={index} className="flex items-start">
                  <span className="text-brand ml-2">โข</span>
                  <span className="text-gray-700">{rec}</span>
                </li>
              ))}
            </ul>
          </div>

          {result.needsAttention && (
            <div className="p-4 bg-red-50 border border-red-200 rounded-lg">
              <p className="text-red-800 font-medium">
                ๐จ ูููุตุญ ุจุดุฏุฉ ุจุงูุชุญุฏุซ ูุน ุฃุฎุตุงุฆู ุงูุตุญุฉ ุงูููุณูุฉ ูู ุฃูุฑุจ ููุช ูููู
              </p>
            </div>
          )}

          <div className="p-4 bg-blue-50 border border-blue-200 rounded-lg">
            <h5 className="font-bold text-blue-900 mb-2">ุงุณุชุฑุงุชูุฌูุงุช ุณุฑูุนุฉ ูุชุญุณูู ุงููุฒุงุฌ:</h5>
            <ul className="text-blue-800 text-sm space-y-1">
              <li>โข ููุงุฑุณุฉ 30 ุฏูููุฉ ูู ุงููุดู ููููุงู</li>
              <li>โข ุงูุญุตูู ุนูู 7-9 ุณุงุนุงุช ููู ููุชุธู</li>
              <li>โข ุงูุชูุงุตู ูุน ุงูุฃุตุฏูุงุก ูุงูุนุงุฆูุฉ</li>
              <li>โข ููุงุฑุณุฉ ุชูููุงุช ุงูุงุณุชุฑุฎุงุก ูุงูุชุฃูู</li>
              <li>โข ุชูุงูู ูุฌุจุงุช ูุชูุงุฒูุฉ ูููุชุธูุฉ</li>
            </ul>
          </div>

          <div className="p-4 bg-green-50 border border-green-200 rounded-lg">
            <h5 className="font-bold text-green-900 mb-2">ุฎุท ุงููุณุงุนุฏุฉ ุงูููุณูุฉ:</h5>
            <p className="text-green-800 text-sm">
              ุฅุฐุง ูุงูุช ูุฏูู ุฃููุงุฑ ุฅูุฐุงุก ุงูููุณุ ุชูุงุตู ููุฑุงู ูุน ุฎุท ุงููุณุงุนุฏุฉ ุงูููุณูุฉ ุฃู ุชูุฌู ูุฃูุฑุจ ูุณุชุดูู
            </p>
          </div>

          <Button 
            onClick={() => {
              setResult(null);
              setCurrentStep(0);
              setAnswers(new Array(9).fill(0));
            }} 
            className="w-full bg-brand hover:bg-brand-dark"
          >
            ุฅุนุงุฏุฉ ุงูุชูููู
          </Button>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="text-xl text-right">ุงุฎุชุจุงุฑ ุชูููู ุฃุนุฑุงุถ ุงูุงูุชุฆุงุจ (PHQ-9)</CardTitle>
          <div className="w-full bg-gray-200 rounded-full h-2">
            <div 
              className="bg-brand h-2 rounded-full transition-all duration-300"
              style={{ width: `${((currentStep + 1) / questions.length) * 100}%` }}
            />
          </div>
          <p className="text-sm text-gray-600">
            ุงูุณุคุงู {currentStep + 1} ูู {questions.length}
          </p>
        </CardHeader>
        <CardContent className="space-y-6">
          <div className="text-center">
            <h3 className="text-lg font-medium text-gray-900 mb-6">
              ุฎูุงู ุงูุฃุณุจูุนูู ุงููุงุถูููุ ูู ูุฑุฉ ุชู ุฅุฒุนุงุฌู ุจูุงุณุทุฉ:
            </h3>
            <p className="text-xl font-semibold text-brand mb-6">
              {questions[currentStep]}
            </p>

            <div className="space-y-3">
              {options.map((option) => (
                <Label
                  key={option.value}
                  className={`flex items-center space-x-3 space-x-reverse p-3 rounded-lg cursor-pointer transition-all ${
                    answers[currentStep] === option.value
                      ? 'bg-brand text-white'
                      : 'bg-gray-50 hover:bg-gray-100 border border-gray-200'
                  }`}
                  onClick={() => handleAnswerChange(option.value)}
                >
                  <input
                    type="radio"
                    name={`question-${currentStep}`}
                    value={option.value}
                    checked={answers[currentStep] === option.value}
                    onChange={() => handleAnswerChange(option.value)}
                    className="sr-only"
                  />
                  <span className="text-lg">{option.label}</span>
                </Label>
              ))}
            </div>
          </div>

          <div className="flex justify-between">
            <Button
              variant="outline"
              onClick={handlePrevious}
              disabled={currentStep === 0}
            >
              ุงูุณุงุจู
            </Button>
            <Button
              onClick={handleNext}
              className="bg-brand hover:bg-brand-dark"
            >
              {currentStep === questions.length - 1 ? 'ุนุฑุถ ุงููุชุงุฆุฌ' : 'ุงูุชุงูู'}
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default DepressionTest;
