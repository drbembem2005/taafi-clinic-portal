
import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { calculateStepsCalories } from '@/utils/healthCalculations';
import { StepsCaloriesResult } from '@/types/healthTools';

const StepsCaloriesCalculator = () => {
  const [formData, setFormData] = useState({
    steps: '',
    weight: '',
    height: '',
    age: '',
    gender: '',
    intensity: ''
  });
  const [result, setResult] = useState<StepsCaloriesResult | null>(null);

  const handleCalculate = () => {
    if (!formData.steps || !formData.weight || !formData.height || !formData.age || !formData.gender) {
      alert('ูุฑุฌู ุฅุฏุฎุงู ุฌููุน ุงูุจูุงูุงุช ุงููุทููุจุฉ');
      return;
    }

    const calculatedResult = calculateStepsCalories(
      parseInt(formData.steps),
      parseFloat(formData.weight),
      parseFloat(formData.height),
      parseInt(formData.age),
      formData.gender,
      formData.intensity
    );

    setResult(calculatedResult);
  };

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="text-xl text-right">ุญุงุณุจุฉ ุฎุทูุงุช ุงููุดู ุฅูู ุณุนุฑุงุช ุญุฑุงุฑูุฉ</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="steps" className="text-right block">ุนุฏุฏ ุงูุฎุทูุงุช</Label>
              <Input
                id="steps"
                type="number"
                placeholder="10000"
                value={formData.steps}
                onChange={(e) => setFormData({ ...formData, steps: e.target.value })}
                className="text-right"
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="weight" className="text-right block">ุงููุฒู (ููููุบุฑุงู)</Label>
              <Input
                id="weight"
                type="number"
                placeholder="70"
                value={formData.weight}
                onChange={(e) => setFormData({ ...formData, weight: e.target.value })}
                className="text-right"
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="height" className="text-right block">ุงูุทูู (ุณูุชููุชุฑ)</Label>
              <Input
                id="height"
                type="number"
                placeholder="170"
                value={formData.height}
                onChange={(e) => setFormData({ ...formData, height: e.target.value })}
                className="text-right"
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="age" className="text-right block">ุงูุนูุฑ</Label>
              <Input
                id="age"
                type="number"
                placeholder="30"
                value={formData.age}
                onChange={(e) => setFormData({ ...formData, age: e.target.value })}
                className="text-right"
              />
            </div>
            <div className="space-y-2">
              <Label className="text-right block">ุงูุฌูุณ</Label>
              <Select value={formData.gender} onValueChange={(value) => setFormData({ ...formData, gender: value })}>
                <SelectTrigger>
                  <SelectValue placeholder="ุงุฎุชุฑ ุงูุฌูุณ" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="male">ุฐูุฑ</SelectItem>
                  <SelectItem value="female">ุฃูุซู</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div className="space-y-2">
              <Label className="text-right block">ุดุฏุฉ ุงููุดู</Label>
              <Select value={formData.intensity} onValueChange={(value) => setFormData({ ...formData, intensity: value })}>
                <SelectTrigger>
                  <SelectValue placeholder="ุงุฎุชุฑ ุดุฏุฉ ุงููุดู" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="slow">ุจุทูุก (ุฃูู ูู 3 ูู/ุณ)</SelectItem>
                  <SelectItem value="moderate">ูุชูุณุท (3-5 ูู/ุณ)</SelectItem>
                  <SelectItem value="fast">ุณุฑูุน (5-6.5 ูู/ุณ)</SelectItem>
                  <SelectItem value="veryFast">ุณุฑูุน ุฌุฏุงู (ุฃูุซุฑ ูู 6.5 ูู/ุณ)</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
          <Button onClick={handleCalculate} className="w-full bg-brand hover:bg-brand-dark">
            ุงุญุณุจ ุงูุณุนุฑุงุช ุงููุญุฑููุฉ
          </Button>
        </CardContent>
      </Card>

      {result && (
        <Card className="border-2 border-brand/20">
          <CardHeader>
            <CardTitle className="text-xl text-center text-brand">ูุชุงุฆุฌ ุชุญููู ุงููุดู</CardTitle>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="grid md:grid-cols-3 gap-4 text-center">
              <div className="p-4 bg-red-50 rounded-lg">
                <div className="text-2xl font-bold text-red-600">{result.caloriesBurned}</div>
                <div className="text-sm text-gray-600">ุณุนุฑุฉ ุญุฑุงุฑูุฉ ูุญุฑููุฉ</div>
              </div>
              <div className="p-4 bg-blue-50 rounded-lg">
                <div className="text-2xl font-bold text-blue-600">{result.distance.toFixed(2)}</div>
                <div className="text-sm text-gray-600">ูููููุชุฑ ููุทูุน</div>
              </div>
              <div className="p-4 bg-green-50 rounded-lg">
                <div className="text-2xl font-bold text-green-600">{result.activeMinutes}</div>
                <div className="text-sm text-gray-600">ุฏูููุฉ ูุดุงุท</div>
              </div>
            </div>

            <div className="space-y-3">
              <h4 className="font-bold text-gray-900">ุชูุตูุงุช ุชุญุณูู ุงููุดู:</h4>
              <ul className="space-y-2">
                {result.recommendations.map((rec, index) => (
                  <li key={index} className="flex items-start">
                    <span className="text-brand ml-2">โข</span>
                    <span className="text-gray-700">{rec}</span>
                  </li>
                ))}
              </ul>
            </div>

            <div className="space-y-3">
              <h4 className="font-bold text-gray-900">ุฎุทุฉ ุฃุณุจูุนูุฉ ููุชุฑุญุฉ:</h4>
              <ul className="space-y-2">
                {result.weeklyProgress.map((day, index) => (
                  <li key={index} className="flex items-start">
                    <span className="text-brand ml-2">๐</span>
                    <span className="text-gray-700">{day}</span>
                  </li>
                ))}
              </ul>
            </div>

            <div className="p-4 bg-green-50 border border-green-200 rounded-lg">
              <h5 className="font-bold text-green-900 mb-2">ูุตุงุฆุญ ูุชุชุจุน ุงูุฎุทูุงุช:</h5>
              <ul className="text-green-800 text-sm space-y-1">
                <li>โข ุงุณุชุฎุฏู ุชุทุจููุงุช ุงููุงุชู ุฃู ุณุงุนุฉ ุฐููุฉ ูุชุชุจุน ุฏููู</li>
                <li>โข ุงูุฏู ุฅูู 10,000 ุฎุทูุฉ ููููุงู ูุญุฏ ุฃุฏูู</li>
                <li>โข ูุณู ุงููุดู ุนูู ูุชุฑุงุช ูุชุนุฏุฏุฉ ุฎูุงู ุงูููู</li>
                <li>โข ุฒุฏ ุงูุดุฏุฉ ุชุฏุฑูุฌูุงู ูุญุฑู ุณุนุฑุงุช ุฃูุซุฑ</li>
              </ul>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
};

export default StepsCaloriesCalculator;
